[
  {
    "name": "efset",
    "title": "EF SET",
    "url": "https://www.efset.org",
    "short_description": "English language testing application for international students.",
    "description": "<p>I was brought into the compnay Education First as a contract front end developer to work on their home-grown application, EF SET. The team had just completed the move to AWS and the backend systems were fantastic, but the front end had been neglected. I was tasked with rebuilding the legacy front end application from scratch. The application is a test of your English language skills, guiding you through a variety of questions and tasks. At the end you get an accreditation in your English skills.</p><p>This app was built to be configurable, and the behaviour could be changed in hundreds of different ways based on the configuration passed in. To allow for this, I built many small React components, where any configurability could be tested in isolation. I also built a system wherby different themes could be loaded on demand. My brief was to build a like for like replacement with the existing design, however there were also designs for the future and I built these as part of a seperate theme that could be easily switched to, once it had been completed.</p><p>Redux was crucial for this application, as there was so much state to handle. I split the store among multiple reducers, each with a seperate area of responsibility. For example, there was the timer reducer (as tests are all time limited), and another handling the users session, plus others.</p><p>I was the sole front end developer working on this project, responsible for making architecture decisions, setting up the entire build and deploy process, and setting up unit testing. The web app is React/Redux based, entirely client side rendered, and unit tested with Enzyme, Mocha and Karma. Builds are handled by Jenkins and I used Docker and nginx to deploy and serve the application.</p><p>The application is now live and in use by around 500,000 people every month. As a bonus, this application is now much more leightweight than it's predecessor. It now weighs 150kb rather than 800kb!</p>",
    "date": "March 2017",
    "skills": [
      "React",
      "Redux",
      "ES6",
      "Babel",
      "Webpack",
      "Webpack",
      "SASS",
      "Docker",
      "Mocha",
      "Enzyme",
      "Jenkins",
      "Karma",
      "Git Flow"
    ],
    "photos": [
      "images/fulls/efset1.png",
      "images/fulls/efset2.png"
    ],
    "thumbnail_photo": "images/thumbs/efset.png",
    "side_project": false,
    "recent": true
  },

  {
    "name": "dongledaddy",
    "title": "Dongle Daddy",
    "url": "https://www.dongledaddy.com",
    "short_description": "A tool to help you find the right cables to connect your devices.",
    "description": "<p>Dongle Daddy is an idea I had for a helpful litte web app. It helps people who are less technically able, and who don't know what cable they need to connect one device to another. <a href='https://www.dongledaddy.com'>Try it out</a> for yourself to see how it works. After asking some questions about the users device and the ports on that device, it consults it's matrix of cables and ports to suggest the correct cable (with a link to Amazon or BT Shop to buy it).</p><p>Upon launching, Dongle Daddy was featured heavily across the internet, appearing on multiple tech blogs such as <a href='https://thenextweb.com/apps/2017/01/20/send-your-parents-this-link-the-next-time-they-ask-which-cables-to-use/#.tnw_sEL2LYxj'>The Next Web</a>, and it hit the dizzying heights of position 17 on the front page of Hacker News. People have commented that they have ended up with the right cable thanks to the site!</p><p>I set out to build this app with performance in mind, therefore I aimed for a tiny bundle size. I used Preact, a 3kb alternative to React. It has the same API as React which means I already knew how to use it, but it saves around 40kb compared to React. I used stateful components rather than a flux implementation for simplicity, and as Dan Abramov says, <a href='https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367'>you don't always need Redux!</a></p><p>The other part of this application is an API, built with Node, which returns the correct link to a product on Amazon or BT Shop based on the users region and the cable required. I built this as a seperate server so all the link data doesn't have to go into the javascript bundle.",
    "date": "January 2017",
    "skills": [
      "Preact",
      "ES6",
      "Babel",
      "Webpack",
      "Node.js",
      "SASS"
    ],
    "photos": [
      "images/fulls/dongledaddy1.png"
    ],
    "thumbnail_photo": "images/thumbs/dongledaddy.png",
    "side_project": true,
    "recent": true
  },

  {
    "name": "eurosport",
    "title": "Eurosport - Exclusive Events",
    "url": null,
    "short_description": "A web app for displaying live events streamed on Eurosport",
    "description": "<p>This is a web app I built whilst working at The Discovery Channel (Eurosport is a Discovery brand) which shows live video streams and upcoming streams for sporting fixtures in the Nordic regions. It is a single page app which uses React to render all the views, and Redux to hold the application state. I decided to build this app using ES6, transpiled by Babel, to take advantage of all the modern language features.</p><p>The app grabs information about all events from a content API and looks to the start time of each event to output the correct component (either a video component, if the event is live, or a 'coming up' poster image otherwise). The user can open the side menu to filter events by sport or competition, or use a text search to find an event with a specific title. User actions such as searches, filtering, or opening a modal are dispatched to the Redux store which changes the state. And since the view is handled with React, changing the DOM is super simple and just requires handing down different parts of this state to props on the relevant components.</p><p>The actual webpage and all static assets are served by a Node/Express server which also does some clever GeoIP lookups to determine if you are in the right country to view the content. Unfortunately this site exists behind a paywall, so screenshots will have to suffice :(</p>",
    "date": "September 2016",
    "skills": [
      "React",
      "Redux",
      "Node.js",
      "ES6",
      "Express",
      "Mocha",
      "SASS",
      "Webpack"
    ],
    "photos": [
      "images/fulls/eurosport1.png",
      "images/fulls/eurosport2.png"
    ],
    "thumbnail_photo": "images/thumbs/eurosport.png",
    "side_project": false,
    "recent": true
  },

  {
    "name": "ubeen",
    "title": "Ubeen.io",
    "url": "https://ubeen.io",
    "short_description": "Analyses your Uber trip history and builds a beatiful infographic from your data.",
    "description": "<p>Ubeen is a web app which uses the Uber API to grab your trip history and analyses that raw data into something interesting. It shows you information about your first ride, longest ride, total ride distance and time, average ride distance, the Uber products you've used, cities you've travelled in, and other lovely information! It is all laid out in a beautiful infographic format, and uses Chart.js to create some great visualisations.</p><p>This was a team effort with fellow developer and creative <a href=\"http://www.pauliescanlon.io\">Paul Scanlon</a>. He took care of the visuals and styling on the front end. I took care of the Node.js web server, APIs, data processing and infrastructure.</p><p>This is a Node.js app using the Express framework. It uses OAuth to authenticate the user through the Uber API and then requests their profile data and trip history data. The actual operation to process the data is fairly simpe - it mostly just needs to loop through all the trips returned from the API and increment counters, e.g. if a trip started at 6.32pm, increment the variable keeping tracking of trips started within 6-7pm. The whole data processing occurs in less than 100 LOC! The next problem is getting the product names from Uber (e.g. uberX, uberLUX). The endpoint used to get trip history only returns a product ID. To save hammering the Uber API, product IDs are saved in Redis, so it looks there first for product names. Then it talks to the Flikr API to get a nice topical photo for the frontend based on where you have taken trips.</p><p>Wired up with Sentry, DataDog and Google Analytics, I know exactly what's going on on the server at all times, and unit tests on the data computation class helps prevent bugs.</p>",
    "date": "June 2016",
    "skills": [
      "Node.js",
      "Express",
      "Redis",
      "Uber API",
      "Flickr API",
      "Mocha",
      "Chai",
      "Promises"
    ],
    "photos": [
      "images/fulls/ubeen1.png",
      "images/fulls/ubeen2.png"
    ],
    "thumbnail_photo": "images/thumbs/ubeen.jpg",
    "side_project": true,
    "recent": true
  },

  {
    "name": "tripfix",
    "title": "Tripfix",
    "url": "http://www.tripfixapp.com",
    "short_description": "A travel planning iPhone app built with the Ionic framework.",
    "description": "<p>Tripfix is my first foray into the app world, and I decided to go down the Phonegap route, rather than the ObjC/Swift route, because I wanted to see if it was possible to build a decent app with web technologies. Turns out it is possible! Tripfix is built on the Ionic framework which provides a lot of UI niceities and extends the Angular framework.</p><p>It is a fairly simple travel planning app - what you do is choose a city you are planning on travelling to. You are then presented many destinations and points of interest in the city one by one. Using the tinder-esque swiping mechanism you can either discard that place or save it to your phone. By doing that you make a sort of travel itinerary and all information is downloaded in either localStorage or by using the File API in the WebUIView. These caches mean you can access the data when you are abroad travelling!</p><p>To date it's had over 1500 downloads and was featured on Product Hunt. The data comes from a fairly simple Node API which pulls information from a MongoDB database.</p>",
    "date": "February 2016",
    "skills": [
      "Ionic Framework",
      "AngularJS",
      "Node.js",
      "Mongo DB",
      "Cordova/Phonegap",
      "Foursquare API"
    ],
    "photos": [
      "images/fulls/tripfix1.jpeg",
      "images/fulls/tripfix2.jpeg",
      "images/fulls/tripfix3.jpeg",
      "images/fulls/tripfix4.jpeg",
      "images/fulls/tripfix5.jpeg"
    ],
    "thumbnail_photo": "images/thumbs/tripfix.png",
    "side_project": true
  },

  {
    "name": "vinemasher",
    "title": "Vine Masher",
    "url": "http://www.vinemasher.com",
    "short_description": "Web app to turn the famous 6 second vine into a new format.",
    "description": "<p>Vine Masher is a platform which allows users to stitch together up to 9 seperate vine videos, and trim their start and end times to create a longer, (hopefully) more engaging video. This was a proof of concept project we built at Super natural, but nonetheless it was covered by <a target='_blank' href='http://thenextweb.com/insider/2015/02/02/vine-masher-lets-you-create-easily-shareable-playlists/'>The Next Web</a> and featured on <a target='_blank' href='http://www.producthunt.com/posts/vine-masher'>Product Hunt</a>!</p><p>This app uses AngularJS for the front end javascript framework and LESS as the CSS preprocessor. It taps into the Vine API to request videos from Vine, which users can then drag and drop onto their stage. Users can then authenticate via the Twitter API to create a Vine Masher account and save their Mash.</p><p>Additionally, this app exposes it's own API running on Node.js with a Mongo database, which deals with user authentication and getting or saving mashes. I was also responsible for the server set up and admininstration on Digital Ocean.</p>",
    "date": "February 2015",
    "skills": [
      "AngularJS",
      "LESS",
      "Node.js",
      "Mongo DB",
      "Grunt",
      "Vine API",
      "Twitter API"
    ],
    "photos": [
      "images/fulls/vinemasher1.png",
      "images/fulls/vinemasher2.png"
    ],
    "thumbnail_photo": "images/thumbs/vinemasher.jpg"
  },

  {
    "name": "wmcu",
    "title": "Wrap My Chicks Up",
    "url": "http://www.wrapmychicksup.com",
    "short_description": "A fully responsive easter themed HTML5 game.",
    "description": "<p>This was an HTML5 game we produced at Super natural for Easter. The game is fully responsive and works on all devices, even down to Android 2.3 and IE8! This was a major requirement of the project as we wanted to push the boundaries of the browser and see what could be produced in an HTML only environment.</p><p>The game preloads efficiently and utilises best practices including concatenation, minification, image compression, and has an automated build and deployment system using Grunt.</p>",
    "date": "April 2014",
    "skills": [
      "HTML5",
      "CSS",
      "Javascipt",
      "Responsive Web Design"
    ],
    "photos": [
      "images/fulls/wmcu1.png",
      "images/fulls/wmcu2.png"
    ],
    "thumbnail_photo": "images/thumbs/wmcu.png"
  },

  {
    "name": "supernatural",
    "title": "Super natural website",
    "url": "http://www.wearesupernatural.com",
    "short_description": "Upgrade and redesign of existing company wordpress site.",
    "description": "<p>As one of my first projects at Super natural, I took the existing company website and pimped it out. I made it responsive, updated the styles based on new designs, added an interactive video header on the homepage, and improved SEO.</p><p>I also greatly improved the site load time and weight. The initial version of the site loaded in far too many unused resources (like a lot of Wordpress sites unfortunately) so by reducing requests, refactoring some scripts and only loading in images when they were about to be visible, the weight of the homepage went from over 1mb to around 300kb (excluding video).</p>",
    "date": "September 2014",
    "skills": [
      "Wordpress",
      "HTML5",
      "CSS",
      "Javascript / jQuery",
      "Responsive Web Design",
      "SEO"
    ],
    "photos": [
      "images/fulls/supernatural1.png"
    ],
    "thumbnail_photo": "images/thumbs/supernatural.png"
  }

]
